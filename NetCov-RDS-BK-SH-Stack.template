{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": ""
                    },
                    "Parameters": [
                    ]
                }
            ],
            "ParameterLabels": {
                "": {
                    "": ""
                }
            }
        }
    },
    "Parameters": {
        "BrokerInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t3a.large",
            "AllowedValues": [
                "t3a.large",
                "t3a.xlarge",
                "t3a.2xlarge"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type."
        },
        "BrokerIp": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "Description": "IP address of the Remote Desktop Services broker server",
            "Type": "String"
        },
        "BrokerServerName": {
            "Description": "Name of the Remote Desktop Services broker server (up to 15 characters)",
            "Type": "String",
            "MaxLength": "15",
            "MinLength": "1"
        },
        "LatestAmiId": {
            "Default": "/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base",
            "Description": "System Manager parameter value for latest Windows Server AMI",
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
        },
        "SessionHostInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "r6i.large",
            "AllowedValues": [
                "r6i.large",
                "r6i.2xlarge",
                "r6i.4xlarge" 
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type."
        },
        "SessionIp": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
            "Description": "IP address of the primary Remote Desktop Services session host server",
            "Type": "String"
        },
        "SessionHostServerName": {
            "Description": "Name of the Remote Desktop Services session host server (up to 15 characters)",
            "Type": "String",
            "MaxLength": "15",
            "MinLength": "1"
        }        
    },
    "Resources": {
        "SessionHost": {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=", {"Ref" : "AWS::StackId"}, "\n",
                                            "region=", {"Ref" : "AWS::Region"}, "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.SessionHost.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -s ", {"Ref" : "AWS::StackId"}, " -r SessionHost", " --region ", {"Ref" : "AWS::Region"}, "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands" : {
                            "a-set-static-ip": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command \"",
                                            "$netip = Get-NetIPConfiguration; ",
                                            "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress}; ",
                                            "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled; ",
                                            "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop; ",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;\"\n"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "60"
                            },
                            "b-join-domain": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Add-Computer -DomainName ",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            " -Credential (New-Object -TypeName pscredential -ArgumentList ('",
                                            {"Fn::ImportValue": "AD-StackSet-DomainNetBIOS"},
                                            "\\",
                                            {"Fn::ImportValue": "AD-StackSet-DomainAdminUserName"},
                                            "', (ConvertTo-SecureString -String ",
                                            {"Fn::ImportValue": "AD-StackSet-DomainAdminPassword"},
                                            " -AsPlainText -Force))) -NewName ",
                                            {"Ref": "SessionHostServerName"},
                                            " -Force"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "60"
                            },
                            "c-remove-windows-defender": {
                                "command": "powershell.exe -command Remove-WindowsFeature -Name Windows-Defender",
                                "waitAfterCompletion": "60"
                            },
                            "d-enable-remotefx": {
                                "command": "powershell.exe -command New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services' -Name 'fEnableRemoteFXAdvancedRemoteApp' -Value 0 -PropertyType DWORD -Force",
                                "waitAfterCompletion": "0"
                            },
                            "e-turn-off-uac": {
                                "command": "powershell.exe -command Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' -Name 'ConsentPromptBehaviorAdmin' -Value 0",
                                "waitAfterCompletion": "0"
                            },
                            "f-turn-off-windows-firewall": {
                                "command": "powershell.exe -command Set-NetFirewallProfile -All -Enabled False",
                                "waitAfterCompletion": "0"
                            },
                            "g-rename-local-admin": {
                                "command": {"Fn::Join": ["", ["powershell.exe -command Rename-LocalUser Administrator -NewName ", {"Fn::ImportValue": "AD-StackSet-LocalAdminUsername"}]]},
                                "waitAfterCompletion": "0"
                            },
                            "h-reset-local-admin-pw": {
                                "command": {"Fn::Join": ["", ["powershell.exe -command Set-LocalUser ", {"Fn::ImportValue": "AD-StackSet-LocalAdminUsername"}, " -Password (ConvertTo-SecureString -String '", {"Fn::ImportValue": "AD-StackSet-LocalAdminPassword"}, "' -AsPlainText -Force)"]]},
                                "waitAfterCompletion": "0"
                            },
                            "i-restart-computer": {
                                "command": "powershell.exe -command Restart-Computer",
                                "waitAfterCompletion": "forever"
                            },
                            "j-enable-powershell-remoting": {
                                "command": "powershell.exe -command Enable-PSRemoting",
                                "waitAfterCompletion": "0"
                            },
                            "k-enable-credssp-server": {
                                "command": "powershell.exe -command Enable-WSManCredSSP -Role Server -Force",
                                "waitAfterCompletion": "0"
                            },
                            "l-signal-success" : { 
                                "command" : { "Fn::Join" : ["", ["cfn-signal.exe -e 0 \"", {"Fn::Base64": {"Ref": "SessionHostWaitHandle"}},"\""]]}
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {"VolumeSize": "100", "VolumeType": "gp3"}
                    }
                ],
                "ImageId": {"Ref": "LatestAmiId"},
                "InstanceType": {"Ref": "SessionHostInstanceType"},
                "KeyName": {"Fn::ImportValue": "AD-StackSet-KeyPairName"},
                "PrivateIpAddress": {"Ref": "SessionIp"},
                "SubnetId": {"Fn::ImportValue": "VPC-StackSet-Subnet1ID"},
                "Tags": [
                    {"Key": "Name", "Value": {"Ref": "SessionHostServerName"}},
                    {"Key": "map-migrated", "Value": "d-server-03jpm34ivsp1f1"}                    
                ], 
                "UserData": { 
                    "Fn::Base64" : { 
                        "Fn::Join" : [
                            "", 
                            [
                                "<script>\n",                  
                                "cfn-init.exe -v -s ", {"Ref" : "AWS::StackId"}, " -r SessionHost ", " --region ", {"Ref" : "AWS::Region"}, "\n",        
                                "</script>"          
                            ]
                        ]
                    }
                }
            }
        },
        "SessionHostWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "SessionHostWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SessionHost",
            "Properties": {
                "Handle": {"Ref": "SessionHostWaitHandle"},
                "Timeout": "3600"
            }
        },        
        "Broker": {
            "Type" : "AWS::EC2::Instance",
            "DependsOn": "SessionHostWaitCondition",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=", {"Ref" : "AWS::StackId"}, "\n",
                                            "region=", {"Ref" : "AWS::Region"}, "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.Broker.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -s ", {"Ref" : "AWS::StackId"}, " -r Broker", " --region ", {"Ref" : "AWS::Region"}, "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\temp\\configureservermanager.bat": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command \" Start-Sleep 5; ",
                                            "if ((Get-Process).ProcessName -contains 'ServerManager') {Get-Process ServerManager | Stop-Process -Force}; ",
                                            "$file = Get-Item $env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Windows\\ServerManager\\ServerList.xml; ",
                                            "Copy-Item -Path $file.FullName -Destination $file-backup -Force; ",
                                            "$xml = [xml] (Get-Content $file); ",
                                            "$newserver = @($xml.ServerList.ServerInfo)[0].clone(); ",
                                            "$newserver.Name = '",
                                            {"Ref": "SessionHostServerName"},
                                            ".",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            "'; ",
                                            "$newserver.LastUpdateTime = '0001-01-01T00:00:00'; ",
                                            "$newserver.Status = '2'; ",
                                            "$xml.ServerList.AppendChild($newserver); ",
                                            "$xml.Save($file.FullName)\"\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands" : {
                            "a-set-static-ip": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command \"",
                                            "$netip = Get-NetIPConfiguration; ",
                                            "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress}; ",
                                            "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled; ",
                                            "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop; ",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;\"\n"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "60"
                            },
                            "b-join-domain": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Add-Computer -DomainName ",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            " -Credential (New-Object -TypeName pscredential -ArgumentList ('",
                                            {"Fn::ImportValue": "AD-StackSet-DomainNetBIOS"},
                                            "\\",
                                            {"Fn::ImportValue": "AD-StackSet-DomainAdminUserName"},
                                            "', (ConvertTo-SecureString -String ",
                                            {"Fn::ImportValue": "AD-StackSet-DomainAdminPassword"},
                                            " -AsPlainText -Force))) -NewName ",
                                            {"Ref": "BrokerServerName"},
                                            " -Force"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "60"
                            },
                            "c-remove-windows-defender": {
                                "command": "powershell.exe -command Remove-WindowsFeature -Name Windows-Defender",
                                "waitAfterCompletion": "60"
                            },
                            "d-enable-remotefx": {
                                "command": "powershell.exe -command New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services' -Name 'fEnableRemoteFXAdvancedRemoteApp' -Value 0 -PropertyType DWORD -Force",
                                "waitAfterCompletion": "0"
                            },
                            "e-turn-off-uac": {
                                "command": "powershell.exe -command Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' -Name 'ConsentPromptBehaviorAdmin' -Value 0",
                                "waitAfterCompletion": "0"
                            },
                            "f-turn-off-windows-firewall": {
                                "command": "powershell.exe -command Set-NetFirewallProfile -All -Enabled False",
                                "waitAfterCompletion": "0"
                            },
                            "g-rename-local-admin": {
                                "command": {"Fn::Join": ["", ["powershell.exe -command Rename-LocalUser Administrator -NewName ", {"Fn::ImportValue": "AD-StackSet-LocalAdminUsername"}]]},
                                "waitAfterCompletion": "0"
                            },
                            "h-reset-local-admin-pw": {
                                "command": {"Fn::Join": ["", ["powershell.exe -command Set-LocalUser ", {"Fn::ImportValue": "AD-StackSet-LocalAdminUsername"}, " -Password (ConvertTo-SecureString -String '", {"Fn::ImportValue": "AD-StackSet-LocalAdminPassword"}, "' -AsPlainText -Force)"]]},
                                "waitAfterCompletion": "0"
                            },
                            "i-restart-computer": {
                                "command": "powershell.exe -command Restart-Computer",
                                "waitAfterCompletion": "forever"
                            },                            
                            "j-enable-powershell-remoting": {
                                "command": "powershell.exe -command Enable-PSRemoting",
                                "waitAfterCompletion": "0"
                            },
                            "k-enable-credssp-server": {
                                "command": "powershell.exe -command Enable-WSManCredSSP -Role Server -Force",
                                "waitAfterCompletion": "0"
                            },
                            "l-enable-credssp-client": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Enable-WSManCredSSP -Role Client -DelegateComputer '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            "' -Force"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "60"
                            },
                            "m-enable-credssp-registry": {
                                "command": {
                                    "Fn::Join": [   
                                        "",
                                        [
                                            "powershell.exe -command \"",
                                            "New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\CredentialsDelegation' -Name AllowFreshCredentialsWhenNTLMOnly -Value 1 -PropertyType Dword -Force; ",
                                            "New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\CredentialsDelegation' -Name ConcatenateDefaults_AllowFreshNTLMOnly -Value 1 -PropertyType Dword -Force; ",
                                            "New-Item -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\CredentialsDelegation\\AllowFreshCredentialsWhenNTLMOnly' -Force; ",
                                            "New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\CredentialsDelegation\\AllowFreshCredentialsWhenNTLMOnly' -Name 1 -Value 'WSMAN/",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            "' -PropertyType String -Force;\"\n"
                                        ]
                                    ]
                                }
                            },
                            "n-create-rds-deployment": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [  
                                            "powershell.exe -command Invoke-Command -ScriptBlock {New-RDSessionDeployment -ConnectionBroker '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            "'  -WebAccessServer  '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            "'  -SessionHost '",
                                            {"Ref": "SessionHostServerName"},
                                            ".",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            "'} -Credential (New-Object -TypeName pscredential -ArgumentList ('",
                                            {"Fn::ImportValue": "AD-StackSet-DomainNetBIOS"},
                                            "\\",
                                            {"Fn::ImportValue": "AD-StackSet-DomainAdminUserName"},
                                            "', (ConvertTo-SecureString -String '",
                                            {"Fn::ImportValue": "AD-StackSet-DomainAdminPassword"},
                                            "' -AsPlainText -Force))) -ComputerName '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            "' -Authentication Credssp"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "60"
                            },
                            "o-add-licensing-server": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Add-RDServer -Server '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            "' -Role 'RDS-LICENSING' -ConnectionBroker '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            "'"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "p-set-license-configuration": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Set-RDLicenseConfiguration -LicenseServer '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            "' -Mode PerUser -ConnectionBroker '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            "' -Force"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "q-new-rds-collection": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Invoke-Command -ScriptBlock {New-RDSessionCollection -CollectionName 'RemoteApps' -CollectionDescription 'Session collection for remote applications and desktops' -SessionHost '",
                                            {"Ref": "SessionHostServerName"},
                                            ".",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            "'} -Credential (New-Object -TypeName pscredential -ArgumentList ('",
                                            {"Fn::ImportValue": "AD-StackSet-DomainNetBIOS"},
                                            "\\",
                                            {"Fn::ImportValue": "AD-StackSet-DomainAdminUserName"},
                                            "', (ConvertTo-SecureString -String '",
                                            {"Fn::ImportValue": "AD-StackSet-DomainAdminPassword"},
                                            "' -AsPlainText -Force))) -ComputerName '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            "' -Authentication Credssp"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "r-set-rds-collection": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Invoke-Command -ScriptBlock {Set-RDSessionCollectionConfiguration -CollectionName 'RemoteApps' -ClientDeviceRedirectionOptions TimeZone -MaxRedirectedMonitors 16 -ClientPrinterRedirected $false -TemporaryFoldersPerSession $true -BrokenConnectionAction Disconnect -TemporaryFoldersDeletedOnExit $true -AutomaticReconnectionEnabled $true -ActiveSessionLimitMin 960 -DisconnectedSessionLimitMin 5 -IdleSessionLimitMin 480 -AuthenticateUsingNLA $true -EncryptionLevel High -SecurityLayer Negotiate -ConnectionBroker '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            "'} -Credential (New-Object -TypeName pscredential -ArgumentList ('",
                                            {"Fn::ImportValue": "AD-StackSet-DomainNetBIOS"},
                                            "\\",
                                            {"Fn::ImportValue": "AD-StackSet-DomainAdminUserName"},
                                            "', (ConvertTo-SecureString -String '",
                                            {"Fn::ImportValue": "AD-StackSet-DomainAdminPassword"},
                                            "' -AsPlainText -Force))) -ComputerName '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Fn::ImportValue": "AD-StackSet-DomainFQDN"},
                                            "' -Authentication Credssp"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "s-configure-server-manager-logon-script": {
								"command": "powershell.exe -command New-ItemProperty -Path HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce -Name ConfigureServerManager -Value \"c:\\cfn\\temp\\configureservermanager.bat\"",
								"waitAfterCompletion" : "0"
							},
                            "t-signal-success" : { 
                                "command" : { "Fn::Join" : ["", ["cfn-signal.exe -e 0 \"", {"Fn::Base64": { "Ref": "BrokerWaitHandle"}},"\""]]}
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {"VolumeSize": "100", "VolumeType": "gp3"}
                    }
                ],
                "ImageId": {"Ref": "LatestAmiId"},
                "InstanceType": {"Ref": "BrokerInstanceType"},
                "KeyName": {"Fn::ImportValue": "AD-StackSet-KeyPairName"},
                "PrivateIpAddress": {"Ref": "BrokerIp"},
                "SubnetId": {"Fn::ImportValue": "VPC-StackSet-Subnet1ID"},
                "Tags": [
                    {"Key": "Name", "Value": {"Ref": "BrokerServerName"}},
                    {"Key": "map-migrated", "Value": "d-server-03jpm34ivsp1f1"}                    
                ], 
                "UserData": { 
                    "Fn::Base64" : { 
                        "Fn::Join" : [
                            "", 
                            [
                                "<script>\n",                  
                                "cfn-init.exe -v -s ", {"Ref" : "AWS::StackId"}, " -r Broker ", " --region ", {"Ref" : "AWS::Region"}, "\n",        
                                "</script>"          
                            ]
                        ]
                    }
                }
            }
        },
        "BrokerWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "BrokerWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "Broker",
            "Properties": {
                "Handle": {"Ref": "BrokerWaitHandle"},
                "Timeout": "3600"
            }
        }       
    },
    "Outputs": {        
    }
}