{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "General Insatnce Parameters"
                    },
                    "Parameters": [
                        "LatestAmiId",
                        "KeyPairName",
                        "VPCAccessSecurityGroupId"
                    ]
                },
                {
                    "Label": {
                        "default": "Active Directory Parameters"
                    },
                    "Parameters": [
                        "ADServerName",
                        "DomainAdminUsername",
                        "DomainAdminPassword",
                        "DomainDNSName",
                        "DomainNetBIOSName",
                        "LocalAdminPassword",
                        "LocalAdminUsername"
                    ]
                },
                {
                    "Label": {
                        "default": "Session Host Parameters"
                    },
                    "Parameters": [
                        "SessionHostInstanceType",
                        "SessionHostName"
                    ]
                },
                {
                    "Label": {
                        "default": "Broker/Gateway Parameters"
                    },
                    "Parameters": [                        
                        "AllocationId",
                        "BrokerInstanceType",
                        "BrokerServerName",
                        "GatewayExternalFqdn"
                    ]
                },
                {
                    "Label": {
                        "default": "S3 Parameters"
                    },
                    "Parameters": [
                        "S3Bucket",
                        "S3Key"
                    ]
                }
            ],
            "ParameterLabels": {
                "ADServerName": {
                    "default": "Active Directory Server Name"
                },                
                "AllocationId": {
                    "default": "Allocation Id"
                },
                "BrokerInstanceType": {
                    "default": "Broker/Gateway Instance Type"
                },
                "BrokerServerName": {
                    "default": "Broker/Gateway Server Name"
                },
                "DomainAdminPassword": {
                    "default": "Domain Admin Password"
                },
                "DomainAdminUsername": {
                    "default": "Domain Admin Username"
                },
                "DomainDNSName": {
                    "default": "Domain DNS Name"
                },
                "DomainNetBIOSName": {
                    "default": "Domain NetBIOS Name"
                },
                "GatewayExternalFqdn": {
                    "default": "Gateway External Fully Qualified Domain Name"
                },
                "LatestAmiId": {
                    "default": "AMI ID"
                },
                "LocalAdminPassword": {
                    "default": "Local Admin Password"
                },
                "LocalAdminUsername": {
                    "default": "Local Admin Username"
                },
                "S3Bucket": {
                    "default": "S3 Bucket Name"
                },
                "S3Key": {
                    "default": "S3 Key"
                },
                "SessionHostInstanceType": {
                    "default": "Session Host Instance Type"
                },
                "SessionHostName": {
                    "default": "Session Host Server Name"
                },
                "VPCAccessSecurityGroupId": {
                    "default": "VPC access security group ID"
                }
            }
        }
    },
    "Parameters": {
        "ADServerName": {
            "Description": "Name of an Active Directory Controller Server in the existing domain",
            "Type": "String",
            "MaxLength": "15",
            "MinLength": "1"
        },
        "AllocationId": {
            "Description": "The allocation ID of the elastic IP address for the gateway",
            "Type": "String"
        },
        "BrokerInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t3a.large",
            "AllowedValues": [
                "t3a.large",
                "t3a.xlarge",
                "t3a.2xlarge"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type."
        },
        "BrokerServerName": {
            "Description": "Name of the Remote Desktop Services broker server (up to 15 characters)",
            "Type": "String",
            "MaxLength": "15",
            "MinLength": "1"
        },
        "DomainAdminPassword": {
            "Description": "The password of the AD account username provided",
            "Type": "String"
        },
        "DomainAdminUserName": {
            "Description": "The username of an AD account with admin privileges",
            "Type": "String"
        },
        "DomainDNSName": {
            "AllowedPattern": "[a-zA-Z0-9]+\\..+",
            "Description": "DNS name of the forest root domain",
            "MaxLength": "25",
            "MinLength": "3",
            "Type": "String"
        },
        "DomainNetBIOSName": {
            "AllowedPattern": "[a-zA-Z0-9]+",
            "Description": "NetBIOS name of the domain (up to 15 characters)",
            "MaxLength": "15",
            "MinLength": "1",
            "Type": "String"
        },
        "GatewayExternalFqdn": {
            "Description": "The external DNS Name of the gateway (e.g. rds.example.com)",
            "Type": "String"
        },
        "LatestAmiId": {
            "Default": "/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base",
            "Description": "System Manager parameter value for latest Windows Server AMI",
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
        },
        "LocalAdminPassword": {
            "Description": "A password for the local admin account",
            "Type": "String"
        },
        "LocalAdminUsername": {
            "Description": "A username for a local admin account",
            "Default": "nctech",
            "Type": "String"
        },
        "SessionHostInstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "r6i.large",
            "AllowedValues": [
                "r6i.large",
                "r6i.2xlarge",
                "r6i.4xlarge" 
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type."
        },
        "SessionHostName": {
            "Description": "Name prefix of the Remote Desktop Services session host server (up to 15 characters)",
            "Type": "String",
            "MaxLength": "15",
            "MinLength": "3"
        },
        "S3Bucket": {
            "Description": "Name of the S3 Bucket with the template artifacts",
            "Type": "String"
        },
        "S3Key" : {
            "Description": "Key of the S3 artifact",
            "Type": "String"
        },
        "VPCAccessSecurityGroupId": {
            "Description": "VPC access security group ID",
            "Type": "AWS::EC2::SecurityGroup::Id"
        }
    },
    "Resources": {
        "SessionHost": {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=", {"Ref" : "AWS::StackId"}, "\n",
                                            "region=", {"Ref" : "AWS::Region"}, "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.SessionHost.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -s ", {"Ref" : "AWS::StackId"}, " -r SessionHost", " --region ", {"Ref" : "AWS::Region"}, "\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands" : {
                            "a-set-static-ip": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command \"",
                                            "$netip = Get-NetIPConfiguration; ",
                                            "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress}; ",
                                            "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled; ",
                                            "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop; ",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;\"\n"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "60"
                            },
                            "b-join-domain": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Add-Computer -DomainName ",
                                            {"Ref": "DomainDNSName"},
                                            " -Credential (New-Object -TypeName pscredential -ArgumentList ('",
                                            {"Ref": "DomainNetBIOSName"},
                                            "\\",
                                            {"Ref": "DomainAdminUserName"},
                                            "', (ConvertTo-SecureString -String ",
                                            {"Ref": "DomainAdminPassword"},
                                            " -AsPlainText -Force))) -NewName ",
                                            {"Ref": "SessionHostName"},
                                            " -Force"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "60"
                            },
                            "c-remove-windows-defender": {
                                "command": "powershell.exe -command Remove-WindowsFeature -Name Windows-Defender",
                                "waitAfterCompletion": "60"
                            },
                            "d-enable-remotefx": {
                                "command": "powershell.exe -command New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services' -Name 'fEnableRemoteFXAdvancedRemoteApp' -Value 0 -PropertyType DWORD -Force",
                                "waitAfterCompletion": "0"
                            },
                            "e-turn-off-uac": {
                                "command": "powershell.exe -command Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' -Name 'ConsentPromptBehaviorAdmin' -Value 0",
                                "waitAfterCompletion": "0"
                            },
                            "f-turn-off-windows-firewall": {
                                "command": "powershell.exe -command Set-NetFirewallProfile -All -Enabled False",
                                "waitAfterCompletion": "0"
                            },
                            "g-enable-powershell-remoting": {
                                "command": "powershell.exe -command Enable-PSRemoting",
                                "waitAfterCompletion": "0"
                            },
                            "h-enable-credssp-server": {
                                "command": "powershell.exe -command Enable-WSManCredSSP -Role Server -Force",
                                "waitAfterCompletion": "0"
                            },
                            "i-rename-local-admin": {
                                "command": {"Fn::Join": ["", ["powershell.exe -command Rename-LocalUser Administrator -NewName ", {"Ref": "LocalAdminUsername"}]]},
                                "waitAfterCompletion": "0"
                            },
                            "j-reset-local-admin-pw": {
                                "command": {"Fn::Join": ["", ["powershell.exe -command Set-LocalUser ", {"Ref": "LocalAdminUsername"}, " -Password (ConvertTo-SecureString -String '", {"Ref": "LocalAdminPassword"}, "' -AsPlainText -Force)"]]},
                                "waitAfterCompletion": "0"
                            },
                            "k-restart-computer": {
                                "command": "powershell.exe -command Restart-Computer",
                                "waitAfterCompletion": "forever"
                            },
                            "l-signal-success" : { 
                                "command" : { "Fn::Join" : ["", ["cfn-signal.exe -e 0 \"", {"Fn::Base64": {"Ref": "SessionHostWaitHandle"}},"\""]]}
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {"VolumeSize": "100", "VolumeType": "gp3"}
                    }
                ],
                "Count": {"Ref": "SessionHostNumberOfInstances"},
                "ImageId": {"Ref": "LatestAmiId"},
                "InstanceType": {"Ref": "SessionHostInstanceType"},
                "KeyName": {"Ref": "KeyPairName"},
                "SecurityGroupIds" : ["VPCAccessSecurityGroupId"],
                "Tags": [
                    {"Key": "Name", "Value": {"Ref": "SessionHostName"}},
                    {"Key": "map-migrated", "Value": "d-server-03jpm34ivsp1f1"}                    
                ], 
                "UserData": { 
                    "Fn::Base64" : { 
                        "Fn::Join" : [
                            "", 
                            [
                                "<script>\n",                  
                                "cfn-init.exe -v -s ", {"Ref" : "AWS::StackId"}, " -r SessionHost ", " --region ", {"Ref" : "AWS::Region"}, "\n",        
                                "</script>"          
                            ]
                        ]
                    }
                }
            }
        },
        "SessionHostWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "SessionHostWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SessionHost",
            "Properties": {
                "Handle": {"Ref": "SessionHostWaitHandle"},
                "Timeout": "3600"
            }
        },        
        "Broker": {
            "Type" : "AWS::EC2::Instance",
            "DependsOn": "SessionHostWaitCondition",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "configSets": {
                        "config": [
                            "setup",
							"deployrds",
                            "finalize"
                        ]
                    },
                    "setup": {
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=", {"Ref" : "AWS::StackId"}, "\n",
                                            "region=", {"Ref" : "AWS::Region"}, "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.Broker.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -s ", {"Ref" : "AWS::StackId"}, " -r Broker", " --region ", {"Ref" : "AWS::Region"}, "\n"
                                        ]
                                    ]
                                }
                            }                            
                        },
                        "commands": {
                            "a-set-static-ip": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command \"",
                                            "$netip = Get-NetIPConfiguration; ",
                                            "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress}; ",
                                            "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled; ",
                                            "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop; ",
                                            "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;\"\n"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "60"
                            },
                            "b-join-domain": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Add-Computer -DomainName ",
                                            {"Ref": "DomainDNSName"},
                                            " -Credential (New-Object -TypeName pscredential -ArgumentList ('",
                                            {"Ref": "DomainNetBIOSName"},
                                            "\\",
                                            {"Ref": "DomainAdminUserName"},
                                            "', (ConvertTo-SecureString -String ",
                                            {"Ref": "DomainAdminPassword"},
                                            " -AsPlainText -Force))) -NewName ",
                                            {"Ref": "BrokerServerName"},
                                            " -Force"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "60"
                            },
                            "c-remove-windows-defender": {
                                "command": "powershell.exe -command Remove-WindowsFeature -Name Windows-Defender",
                                "waitAfterCompletion": "60"
                            },
                            "d-enable-remotefx": {
                                "command": "powershell.exe -command New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services' -Name 'fEnableRemoteFXAdvancedRemoteApp' -Value 0 -PropertyType DWORD -Force",
                                "waitAfterCompletion": "0"
                            },
                            "e-turn-off-uac": {
                                "command": "powershell.exe -command Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System' -Name 'ConsentPromptBehaviorAdmin' -Value 0",
                                "waitAfterCompletion": "0"
                            },
                            "f-turn-off-windows-firewall": {
                                "command": "powershell.exe -command Set-NetFirewallProfile -All -Enabled False",
                                "waitAfterCompletion": "0"
                            },                            
                            "g-enable-powershell-remoting": {
                                "command": "powershell.exe -command Enable-PSRemoting",
                                "waitAfterCompletion": "0"
                            },
                            "h-enable-credssp-server": {
                                "command": "powershell.exe -command Enable-WSManCredSSP -Role Server -Force",
                                "waitAfterCompletion": "0"
                            },
                            "i-enable-credssp-client": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Enable-WSManCredSSP -Role Client -DelegateComputer '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "' -Force"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "60"
                            },
                            "j-enable-credssp-registry": {
                                "command": {
                                    "Fn::Join": [   
                                        "",
                                        [
                                            "powershell.exe -command \"",
                                            "New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\CredentialsDelegation' -Name AllowFreshCredentialsWhenNTLMOnly -Value 1 -PropertyType Dword -Force; ",
                                            "New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\CredentialsDelegation' -Name ConcatenateDefaults_AllowFreshNTLMOnly -Value 1 -PropertyType Dword -Force; ",
                                            "New-Item -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\CredentialsDelegation\\AllowFreshCredentialsWhenNTLMOnly' -Force; ",
                                            "New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\CredentialsDelegation\\AllowFreshCredentialsWhenNTLMOnly' -Name 1 -Value 'WSMAN/",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "' -PropertyType String -Force;\"\n"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "k-install-package-provider": {
                                "command": "powershell.exe -command Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force",
                                "waitAfterCompletion": "0"
                            },
                            "l-install-powershellget": {
                                "command": "powershell.exe -command Install-Module -Name PowerShellGet -Force",
                                "waitAfterCompletion": "0"
                            },
                            "m-install-rdwebclientmanagement": {
                                "command": "powershell.exe -command Install-Module -Name RDWebClientManagement -Force -AcceptLicense",
                                "waitAfterCompletion": "0"
                            },
                            "n-rename-local-admin": {
                                "command": {"Fn::Join": ["", ["powershell.exe -command Rename-LocalUser Administrator -NewName ", {"Ref": "LocalAdminUsername"}]]},
                                "waitAfterCompletion": "0"
                            },
                            "o-reset-local-admin-pw": {
                                "command": {"Fn::Join": ["", ["powershell.exe -command Set-LocalUser ", {"Ref": "LocalAdminUsername"}, " -Password (ConvertTo-SecureString -String '", {"Ref": "LocalAdminPassword"}, "' -AsPlainText -Force)"]]},
                                "waitAfterCompletion": "0"
                            },
                            "p-restart-computer": {
                                "command": "powershell.exe -command Restart-Computer",
                                "waitAfterCompletion": "forever"
                            }                            
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "deployrds": {
                        "files": {
                            "c:\\cfn\\win-acme.zip": {
                                "source": {
                                    "Fn::Join": [
                                        "/",
                                        [
                                            "https://s3.amazonaws.com",
                                            {"Ref": "S3Bucket"},
                                            {"Ref": "S3Key"}
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "a-create-rds-deployment": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [  
                                            "powershell.exe -command Invoke-Command -ScriptBlock {New-RDSessionDeployment -ConnectionBroker '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "'  -WebAccessServer  '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "'  -SessionHost '",
                                            {"Ref": "SessionHostName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "'} -Credential (New-Object -TypeName pscredential -ArgumentList ('",
                                            {"Ref": "DomainNetBIOSName"},
                                            "\\",
                                            {"Ref": "DomainAdminUserName"},
                                            "', (ConvertTo-SecureString -String '",
                                            {"Ref": "DomainAdminPassword"},
                                            "' -AsPlainText -Force))) -ComputerName '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "' -Authentication Credssp"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "60"
                            },
                            "b-install-gateway-feature": {
                                "command": "powershell.exe -command Install-WindowsFeature -Name RDS-Gateway -IncludeManagementTools",
                                "waitAfterCompletion": "30"                           
                            },
                            "c-add-gateway-server": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Add-RDServer -Server '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "' -Role 'RDS-GATEWAY' -ConnectionBroker '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "' -GatewayExternalFqdn '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "'"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "30"
                            },
                            "d-add-licensing-server": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Add-RDServer -Server '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "' -Role 'RDS-LICENSING' -ConnectionBroker '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "'"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "e-set-license-configuration": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Set-RDLicenseConfiguration -LicenseServer '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "' -Mode PerUser -ConnectionBroker '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "' -Force"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "f-activate-license-server":{
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command $wmiClass = ([wmiclass]'\\\\localhost\\root\\cimv2:Win32_TSLicenseServer'); ",
                                            "$wmiTSLicenseObject = Get-WMIObject Win32_TSLicenseServer; ",
                                            "$wmiTSLicenseObject.FirstName = 'Test'; ",
                                            "$wmiTSLicenseObject.LastName = 'Inc'; ",
                                            "$wmiTSLicenseObject.Company = 'Test Inc'; ",
                                            "$wmiTSLicenseObject.CountryRegion = 'United States'; ",
                                            "$wmiTSLicenseObject.Put(); ",
                                            "$wmiClass.ActivateServerAutomatic(); ",
                                            "$wmiClass.GetActivationStatus().ActivationStatus; ",
                                            "Write-Host '(0 = activated, 1 = not activated)';\n"
                                        ]
                                    ]
                                }
                            },
                            "g-add-license-server-to-ad": {
                                "command" :{
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Invoke-Command -ScriptBlock {Add-ADGroupMember -Identity 'Terminal Server License Servers' -Members (Get-ADComputer -Identity '", 
                                            {"Ref": "BrokerServerName"},
                                            "')} -ComputerName '",
                                            {"Ref": "ADServerName"},
                                            "' -Credential (New-Object -TypeName pscredential -ArgumentList ('",
                                            {"Ref": "DomainNetBIOSName"},
                                            "\\",
                                            {"Ref": "DomainAdminUserName"},
                                            "', (ConvertTo-SecureString -String '",
                                            {"Ref": "DomainAdminPassword"},
                                            "' -AsPlainText -Force)))"
                                        ]
                                    ]
                                }
                            },
                            "h-install-rdwebclientpackage": {
                                "command": "powershell.exe -command Install-RDWebClientPackage",
                                "waitAfterCompletion": "0"
                            },
                            "i-unpack-winacme-module": {
                                "command": "powershell.exe -command Expand-Archive -Path 'c:\\cfn\\win-acme.zip' -DestinationPath 'c:\\cfn\\win-acme\\' -Force",
								"waitAfterCompletion": "0"
                            },
                            "j-generate-ssl-cert": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "c:\\cfn\\win-acme\\wacs.exe --source manual --host ",
                                            {"Ref": "GatewayExternalFqdn"},
                                            " --certificatestore My --installation iis,script --installationsiteid 1 --script \"C:\\cfn\\win-acme\\Scripts\\ImportRDSFull.ps1\" --scriptparameters \"{CertThumbprint}\" --emailaddress support@netcov.com --accepttos"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "k-new-rds-collection": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Invoke-Command -ScriptBlock {New-RDSessionCollection -CollectionName 'RemoteApps' -CollectionDescription 'Session collection for remote applications and desktops' -SessionHost '",
                                            {"Ref": "SessionHostName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "'} -Credential (New-Object -TypeName pscredential -ArgumentList ('",
                                            {"Ref": "DomainNetBIOSName"},
                                            "\\",
                                            {"Ref": "DomainAdminUserName"},
                                            "', (ConvertTo-SecureString -String '",
                                            {"Ref": "DomainAdminPassword"},
                                            "' -AsPlainText -Force))) -ComputerName '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "' -Authentication Credssp"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "l-set-rds-collection": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command Invoke-Command -ScriptBlock {Set-RDSessionCollectionConfiguration -CollectionName 'RemoteApps' -ClientDeviceRedirectionOptions TimeZone -MaxRedirectedMonitors 16 -ClientPrinterRedirected $false -TemporaryFoldersPerSession $true -BrokenConnectionAction Disconnect -TemporaryFoldersDeletedOnExit $true -AutomaticReconnectionEnabled $true -ActiveSessionLimitMin 960 -DisconnectedSessionLimitMin 5 -IdleSessionLimitMin 480 -AuthenticateUsingNLA $true -EncryptionLevel High -SecurityLayer Negotiate -ConnectionBroker '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "'} -Credential (New-Object -TypeName pscredential -ArgumentList ('",
                                            {"Ref": "DomainNetBIOSName"},
                                            "\\",
                                            {"Ref": "DomainAdminUserName"},
                                            "', (ConvertTo-SecureString -String '",
                                            {"Ref": "DomainAdminPassword"},
                                            "' -AsPlainText -Force))) -ComputerName '",
                                            {"Ref": "BrokerServerName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "' -Authentication Credssp"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }                         
                        }
                    },
                    "finalize": {
                        "files": {
                            "c:\\cfn\\configureservermanager.bat": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "powershell.exe -command \"Start-Process $env:windir\\system32\\ServerManager.exe; Start-Sleep 5; ",
                                            "if ((Get-Process).ProcessName -contains 'ServerManager') {Get-Process ServerManager | Stop-Process -Force}; ",
                                            "$file = Get-Item $env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Windows\\ServerManager\\ServerList.xml; ",
                                            "Copy-Item -Path $file.FullName -Destination $file-backup -Force; ",
                                            "$xml = [xml] (Get-Content $file); ",
                                            "$newserver = @($xml.ServerList.ServerInfo)[0].clone(); ",
                                            "$newserver.Name = '",
                                            {"Ref": "SessionHostName"},
                                            ".",
                                            {"Ref": "DomainDNSName"},
                                            "'; ",
                                            "$newserver.LastUpdateTime = '0001-01-01T00:00:00'; ",
                                            "$newserver.Status = '2'; ",
                                            "$xml.ServerList.AppendChild($newserver); ",
                                            "$xml.Save($file.FullName); Start-Process $env:windir\\system32\\ServerManager.exe;\"\n"
                                        ]
                                    ]
                                }
                            }
                        },                       
                        "commands": {
                            "a-publish-rdwebclientpackage": {
                                "command": "powershell.exe -command Publish-RDWebClientPackage -Type Production -Latest",
                                "waitAfterCompletion": "0"
                            },
                            "b-add-run-once": {
                                "command": "powershell.exe -command New-Item -Path HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce -Force",
                                "waitAfterCompletion" : "0"
                            },
                            "c-configure-run-once": {
                                "command": "powershell.exe -command New-ItemProperty -Path HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce -Name ConfigureServerManager -Value \"c:\\cfn\\temp\\configureservermanager.bat\"",
                                "waitAfterCompletion" : "0"
                            },
                            "d-signal-success" : { 
                                "command" : { "Fn::Join" : ["", ["cfn-signal.exe -e 0 \"", {"Fn::Base64": {"Ref": "BrokerWaitHandle"}},"\""]]}
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {"VolumeSize": "100", "VolumeType": "gp3"}
                    }
                ],
                "ImageId": {"Ref": "LatestAmiId"},
                "InstanceType": {"Ref": "BrokerInstanceType"},
                "KeyName": {"Ref": "KeyPairName"},
                "SecurityGroupIds" : ["VPCAccessSecurityGroupId"],
                "Tags": [
                    {"Key": "Name", "Value": {"Ref": "BrokerServerName"}},
                    {"Key": "map-migrated", "Value": "d-server-03jpm34ivsp1f1"}                    
                ], 
                "UserData": { 
                    "Fn::Base64" : { 
                        "Fn::Join" : [
                            "", 
                            [
                                "<script>\n",                  
                                "cfn-init.exe -v -c config -s ", {"Ref" : "AWS::StackId"}, " -r Broker ", " --region ", {"Ref" : "AWS::Region"}, "\n",        
                                "</script>"          
                            ]
                        ]
                    }
                }
            }
        },
        "BrokerWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "BrokerWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "Broker",
            "Properties": {
                "Handle": {"Ref": "BrokerWaitHandle"},
                "Timeout": "3600"
            }
        }, 
        "GatewayEIPAssociation": {
            "DependsOn": "Broker",
            "Type" : "AWS::EC2::EIPAssociation",
            "Properties" : {
                "AllocationId" : {"Ref": "AllocationId"},
                "InstanceId" : {"Ref": "Broker"}
              }
        }      
    },
    "Outputs": {
        
    }
}